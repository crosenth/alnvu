#!/usr/bin/env python

"""
Create formatted sequence alignments with optional pdf output.
"""

import sys
import argparse
import pprint
import time

import alnvu.util as util
import alnvu.pdf as pdf

def get_range(rawrange):

    try:
        start, stop = [int(x) for x in rawrange.split(',')]
    except ValueError:
        print('Error in "-r/--range %s": argument requires two integers separated by a comma.' % rawrange)
        sys.exit(1)

    return [start, stop]

def main(arguments):

    parser = argparse.ArgumentParser(description=__doc__, version = "0.9")
    parser.add_argument(
        "infile", type = argparse.FileType('rU'),
        help = "input file in fasta format (can also read from stdin)")

    parser.add_argument("-C", "--case", dest="case",
        help="Convert all characters to a uniform case ('upper','lower')",
        metavar='CASE', choices=['upper','lower'])


    parser.add_argument("-q", "--quiet", dest="quiet",
        help="Suppress output of alignment to screen.",
        action='store_true')

    ## layout
    layout_options = parser.add_argument_group('Layout')

    layout_options.add_argument("-w", "--width", dest="ncol",
        help="Width of sequence to display in each block in characters [%(default)s]",
        metavar="NUMBER", type = int, default = 115)

    layout_options.add_argument("-L", "--lines-per-block", dest="nrow",
        help="Sequences (lines) per block. [%(default)s]",
        metavar="NUMBER", type = int, default = 75)

    ## columns
    column_options = parser.add_argument_group('Column selection')

    column_options.add_argument("-x", "--exclude-invariant", dest="exclude_invariant",
        help="""only show columns with at least min_subs non-consensus
bases (set min_subs using the -s option)""",
        action='store_true', default = False)

    column_options.add_argument("-g", "--include-gapcols", dest="include_gapcols",
        help="Show columns containing only gap characters.",
        action='store_true', default = False)

    column_options.add_argument(
        "-r", "--range", dest="rawrange",
        help="Range of aligned positions to display (eg '-r start,stop')",
        metavar='INTERVAL')

    column_options.add_argument("-s", "--min_subs", dest="min_subs",
        help="minimum NUMBER of substitutions required to define a position as variable. [%(default)s]",
        metavar="NUMBER", type = int, default = 1)
    
    ## consensus
    consensus_options = parser.add_argument_group('Consensus calculation and display')

    consensus_options.add_argument("-c", "--consensus", dest="add_consensus",
        help="Include show a consensus sequence [%(default)s]",
        action='store_true', default = False)

    consensus_options.add_argument("-d", "--compare-to", dest="compare_to",
        help="""
Number of the sequence to use as a reference. Nucleotide positions
identical to the reference will be shown as a '.' The default behavior is
to use the consensus sequence as a reference. Use the -i option to display
the sequence numbers for reference. A value of -1 suppresses this behavior.
""", type = int, metavar = 'NUMBER', default = 0)
    
    ## annotation
    name_options = parser.add_argument_group('Sequence annotation')

    name_options.add_argument("-i", "--number-sequences", dest="seqnums",
        help="Show sequence number to left of name.",
        action='store_true', default = False)

    name_options.add_argument("-n", "--name-max", dest="name_max",
        help="maximum width of sequence name in characters [%(default)s]",
        metavar="NUMBER", type = int, default = 35)

    name_options.add_argument("-N", "--name-split", dest="name_split",
        help="""Specify a character delimiting sequence names. By
        default, the name of each sequence is the first
        whitespace-delimited word. '--name-split=none' causes the entire line after the '>' to be displayed.""",
        metavar="CHARACTER")


    pdf_options = parser.add_argument_group('PDF output')

    pdf_options.add_argument("-o", "--outfile", dest="outfile",
        help="Write output to a pdf file.")

    pdf_options.add_argument("-F", "--fontsize", dest="fontsize",
        help="Font size for pdf output [%(default)s]",
        metavar="NUMBER", default=7, type = int)

    pdf_options.add_argument("-O", "--orientation", dest="orientation",
        help="Choose from portrait or landscape [%(default)s]",
        metavar="ORIENTATION", default = 'portrait')

    pdf_options.add_argument(
        "-b", "--blocks-per-page", dest="blocks_per_page",
        metavar="NUMBER", type = int, default = 1,
        help="Number of aligned blocks of sequence per page [%(default)s]")
    
    args = parser.parse_args(arguments)

    name_split = False if args.name_split == 'none' else args.name_split

    seqs = list(util.readfasta(args.infile, name_split = name_split))

    pages = util.reformat(
        seqs,
        name_min = 10,
        name_max = args.name_max,
        nrow = args.nrow,
        ncol = args.ncol,
        add_consensus = args.add_consensus,
        compare_to = args.compare_to,
        exclude_gapcols = not args.include_gapcols,
        exclude_invariant = args.exclude_invariant,
        min_subs = args.min_subs,
        simchar = '.',
        countGaps = False,
        case = args.case,
        seqrange = get_range(args.rawrange) if args.rawrange else None,
        seqnums = args.seqnums)

    if not args.quiet:
        for page in pages:
            for line in page:
                print line.rstrip()
            print ''

    if args.outfile:
        pdf.print_pdf(
            pages,
            outfile = args.outfile,
            fontsize = args.fontsize,
            orientation = args.orientation,
            blocks_per_page = args.blocks_per_page
            )

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

